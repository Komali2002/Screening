{"ast":null,"code":"import React, { useState, useRef, useEffect } from 'react';\nimport Select, { components } from 'react-select';\nimport throttle from 'lodash.throttle';\nimport base64 from 'base-64';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar postAutocompleteAddress = function postAutocompleteAddress(apiKey, addressPrefix, additionalAddressData) {\n  var url = 'https://api.lob.com/v1/us_autocompletions';\n  var init = {\n    method: 'POST',\n    headers: {\n      Authorization: \"Basic \" + base64.encode(apiKey + ':'),\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(_extends({\n      address_prefix: addressPrefix\n    }, additionalAddressData))\n  };\n  return fetch(url, init);\n};\n\nvar postVerifyAddress = function postVerifyAddress(apiKey, address) {\n  var payload = typeof address === 'string' ? {\n    address: address\n  } : address;\n  var url = 'https://api.lob.com/v1/us_verifications';\n  var init = {\n    method: 'POST',\n    headers: {\n      Authorization: \"Basic \" + base64.encode(apiKey + ':'),\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(payload)\n  };\n  return fetch(url, init);\n};\n\nvar postVerifyInternationalAddress = function postVerifyInternationalAddress(apiKey, address, countryCode) {\n  var url = 'https://api.lob.com/v1/intl_verifications';\n  var init = {\n    method: 'POST',\n    headers: {\n      Authorization: \"Basic \" + base64.encode(apiKey + ':'),\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      address: address,\n      country: countryCode\n    })\n  };\n  return fetch(url, init);\n};\n\nvar _excluded = [\"addressComponentValues\", \"apiKey\", \"delaySearch\", \"delayValue\", \"onSelection\", \"onError\", \"onInputChange\", \"inputValue\", \"primaryLineOnly\"];\n\nvar capitalizeFirstLetter = function capitalizeFirstLetter(txt) {\n  return txt.toLowerCase().split(' ').map(function (s) {\n    return s.charAt(0).toUpperCase() + s.substring(1);\n  }).join(' ');\n};\n\nvar getLobLabel = function getLobLabel() {\n  return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"p\", null, \"Powered by\", ' ', /*#__PURE__*/React.createElement(\"img\", {\n    style: {\n      height: '1.1em',\n      verticalAlign: 'bottom'\n    },\n    src: \"https://admin.google.com/u/0/ac/images/logo.gif?uid=115468147059962245207&service=google_gsuite\",\n    alt: \"Lob\"\n  })));\n};\n\nvar Input = function Input(props) {\n  return /*#__PURE__*/React.createElement(components.Input, _extends({}, props, {\n    isHidden: false\n  }));\n};\n\nvar Autocomplete = function Autocomplete(_ref) {\n  var _ref$addressComponent = _ref.addressComponentValues,\n      addressComponentValues = _ref$addressComponent === void 0 ? {} : _ref$addressComponent,\n      apiKey = _ref.apiKey,\n      _ref$delaySearch = _ref.delaySearch,\n      delaySearch = _ref$delaySearch === void 0 ? true : _ref$delaySearch,\n      _ref$delayValue = _ref.delayValue,\n      delayValue = _ref$delayValue === void 0 ? 800 : _ref$delayValue,\n      _ref$onSelection = _ref.onSelection,\n      onSelection = _ref$onSelection === void 0 ? function () {} : _ref$onSelection,\n      _ref$onError = _ref.onError,\n      onError = _ref$onError === void 0 ? function () {} : _ref$onError,\n      _ref$onInputChange = _ref.onInputChange,\n      onInputChange = _ref$onInputChange === void 0 ? function () {} : _ref$onInputChange,\n      _ref$inputValue = _ref.inputValue,\n      defaultInputValue = _ref$inputValue === void 0 ? '' : _ref$inputValue,\n      _ref$primaryLineOnly = _ref.primaryLineOnly,\n      primaryLineOnly = _ref$primaryLineOnly === void 0 ? false : _ref$primaryLineOnly,\n      reactSelectProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var _useState = useState(defaultInputValue),\n      inputValue = _useState[0],\n      setInputValue = _useState[1];\n\n  var _useState2 = useState('AD'),\n      selectValue = _useState2[0],\n      setSelectValue = _useState2[1];\n\n  var _useState3 = useState([]),\n      autocompleteResults = _useState3[0],\n      setAutocompleteResults = _useState3[1];\n\n  var fetchData = function fetchData(inputValue, addressComponentValues) {\n    return postAutocompleteAddress(apiKey, inputValue, addressComponentValues).then(function (result) {\n      return result.json();\n    }).then(function (_ref2) {\n      var suggestions = _ref2.suggestions,\n          error = _ref2.error;\n\n      if (error) {\n        onError(error.message);\n        return;\n      }\n\n      var newSuggestions = suggestions.map(function (x) {\n        return {\n          value: x,\n          label: capitalizeFirstLetter(x.primary_line) + \" \" + capitalizeFirstLetter(x.city) + \" \" + x.state\n        };\n      });\n      setAutocompleteResults(newSuggestions);\n    })[\"catch\"](function (err) {\n      console.error(err.message);\n      onError(err.message);\n    });\n  };\n\n  var throttledFetchData = useRef(throttle(fetchData, delayValue)).current;\n  useEffect(function () {\n    if (inputValue) {\n      if (delaySearch) {\n        throttledFetchData(inputValue, addressComponentValues);\n      } else {\n        fetchData(inputValue, addressComponentValues);\n      }\n    }\n  }, [inputValue]);\n\n  var handleInputChange = function handleInputChange(newInputValue, _ref3) {\n    var action = _ref3.action;\n\n    if (action === 'input-blur') {\n      setInputValue(inputValue || (selectValue ? selectValue.label : ''));\n    } else if (action === 'input-change') {\n      setInputValue(newInputValue);\n      onInputChange(newInputValue, {\n        action: action\n      });\n    }\n  };\n\n  var handleChange = function handleChange(option) {\n    if (typeof option === 'string') {\n      setInputValue(option);\n      setSelectValue(option);\n      onSelection(option);\n      return;\n    }\n\n    if (primaryLineOnly) {\n      setInputValue(option ? option.value.primary_line : '');\n    } else {\n      setInputValue(option ? option.label : '');\n    }\n\n    setSelectValue(option);\n    onSelection(option);\n  };\n\n  return /*#__PURE__*/React.createElement(Select, _extends({\n    components: {\n      Input: Input\n    },\n    inputValue: inputValue,\n    options: autocompleteResults,\n    controlShouldRenderValue: false,\n    noOptionsMessage: getLobLabel,\n    placeholder: \"Start typing an address...\",\n    value: selectValue\n  }, reactSelectProps, {\n    onChange: handleChange,\n    onInputChange: handleInputChange\n  }));\n};\n\nvar baseStyles = {\n  lob_container: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  lob_input: {\n    backgroundColor: 'hsl(0, 0%, 100%)',\n    border: 'solid 1px hsl(0, 0%, 80%)',\n    borderRadius: '4px',\n    boxSizing: 'border-box',\n    minHeight: '38px',\n    outline: 0,\n    padding: '0px 8px',\n    width: '100%'\n  },\n  lob_label: {\n    alignSelf: 'center',\n    minWidth: '5em',\n    marginRight: '1em',\n    textAlign: 'end'\n  },\n  lob_row: {\n    display: 'flex',\n    flexDirection: 'row',\n    marginBottom: '1em'\n  }\n};\n\nvar useMergedStyles = function (userStyles, isInternational) {\n  var mergedStyles = {};\n\n  if (isInternational) {\n    baseStyles = _extends({}, baseStyles, {\n      lob_label: _extends({}, baseStyles.lob_label, {\n        minWidth: '8em'\n      })\n    });\n  }\n\n  Object.keys(baseStyles).forEach(function (key) {\n    mergedStyles[key] = key in userStyles ? userStyles[key](baseStyles[key]) : baseStyles[key];\n  });\n  return mergedStyles;\n};\n\nvar _excluded$1 = [\"apiKey\", \"onFieldChange\", \"onSelection\", \"styles\"];\nvar defaultForm = {\n  primary_line: '',\n  secondary_line: '',\n  city: '',\n  state: '',\n  zip_code: ''\n};\nvar customStyles = {\n  container: function container(provided) {\n    return _extends({}, provided, {\n      width: '100%'\n    });\n  }\n};\n\nvar AddressForm = function AddressForm(_ref) {\n  var apiKey = _ref.apiKey,\n      _ref$onFieldChange = _ref.onFieldChange,\n      onFieldChange = _ref$onFieldChange === void 0 ? function () {} : _ref$onFieldChange,\n      _ref$onSelection = _ref.onSelection,\n      onSelection = _ref$onSelection === void 0 ? function () {} : _ref$onSelection,\n      _ref$styles = _ref.styles,\n      styles = _ref$styles === void 0 ? {} : _ref$styles,\n      additionalProps = _objectWithoutPropertiesLoose(_ref, _excluded$1);\n\n  var _useState = useState(defaultForm),\n      form = _useState[0],\n      setForm = _useState[1];\n\n  var primary_line = form.primary_line,\n      secondary_line = form.secondary_line,\n      city = form.city,\n      state = form.state,\n      zip_code = form.zip_code;\n\n  var handleChange = function handleChange(e) {\n    var _extends2;\n\n    setForm(_extends({}, form, (_extends2 = {}, _extends2[e.target.id] = e.target.value, _extends2)));\n    onFieldChange(e);\n  };\n\n  var handleSelect = function handleSelect(option) {\n    setForm(_extends({}, option.value, {\n      secondary_line: option.value.secondary_line || ''\n    }));\n    onSelection(option);\n  };\n\n  var mergedStyles = useMergedStyles(styles, false);\n  console.log('mergedStyles', mergedStyles);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: mergedStyles.lob_container\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: mergedStyles.lob_row\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: mergedStyles.lob_label,\n    htmlFor: \"primary_line\"\n  }, \"Address\"), /*#__PURE__*/React.createElement(Autocomplete, _extends({\n    apiKey: apiKey,\n    inputId: \"primary_line\",\n    inputValue: primary_line\n  }, additionalProps, {\n    _addressComponentValues: {\n      city: city,\n      state: state,\n      zip_code: zip_code\n    },\n    onSelection: handleSelect,\n    primaryLineOnly: true,\n    styles: customStyles\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    style: mergedStyles.lob_row\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: mergedStyles.lob_label,\n    htmlFor: \"secondary_line\"\n  }, \"Apt, Suite\"), /*#__PURE__*/React.createElement(\"input\", {\n    style: mergedStyles.lob_input,\n    id: \"secondary_line\",\n    onChange: handleChange,\n    value: secondary_line\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: mergedStyles.lob_row\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: mergedStyles.lob_label,\n    htmlFor: \"city\"\n  }, \"City\"), /*#__PURE__*/React.createElement(\"input\", {\n    style: mergedStyles.lob_input,\n    id: \"city\",\n    onChange: handleChange,\n    value: city\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: mergedStyles.lob_row\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: mergedStyles.lob_label,\n    htmlFor: \"state\"\n  }, \"State\"), /*#__PURE__*/React.createElement(\"input\", {\n    style: mergedStyles.lob_input,\n    id: \"state\",\n    onChange: handleChange,\n    value: state\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: mergedStyles.lob_row\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: mergedStyles.lob_label,\n    htmlFor: \"zip_code\"\n  }, \"Zip\"), /*#__PURE__*/React.createElement(\"input\", {\n    style: _extends({}, mergedStyles.lob_input, {\n      marginBottom: 'auto'\n    }),\n    id: \"zip_code\",\n    onChange: handleChange,\n    value: zip_code\n  })));\n};\n\nvar validLobCountryCodesn\nvar CountrySelect = function CountrySelect(_ref) {\n  var props = _extends({}, _ref);\n\n  return /*#__PURE__*/React.createElement(\"select\", props, validLobCountryCodes.map(function (code) {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: code,\n      value: code\n    }, code);\n  }));\n};\n\nvar defaultForm$1 = {\n  primary_line: '',\n  secondary_line: '',\n  city: '',\n  state: '',\n  zip_code: ''\n};\n\nvar AddressFormInternational = function AddressFormInternational(_ref) {\n  var _ref$onFieldChange = _ref.onFieldChange,\n      onFieldChange = _ref$onFieldChange === void 0 ? function () {} : _ref$onFieldChange,\n      _ref$styles = _ref.styles,\n      styles = _ref$styles === void 0 ? {} : _ref$styles;\n\n  var _useState = useState(defaultForm$1),\n      form = _useState[0],\n      setForm = _useState[1];\n\n  var primary_line = form.primary_line,\n      secondary_line = form.secondary_line,\n      city = form.city,\n      state = form.state,\n      zip_code = form.zip_code,\n      country = form.country;\n\n  var handleChange = function handleChange(e) {\n    var _extends2;\n\n    setForm(_extends({}, form, (_extends2 = {}, _extends2[e.target.id] = e.target.value, _extends2)));\n    onFieldChange(e);\n  };\n\n  var mergedStyles = useMergedStyles(styles, true);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    \"data-testid\": \"intl_container\",\n    style: mergedStyles.lob_container\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: mergedStyles.lob_row\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: mergedStyles.lob_label,\n    htmlFor: \"primary_line\"\n  }, \"Address Line 1\"), /*#__PURE__*/React.createElement(\"input\", {\n    style: mergedStyles.lob_input,\n    id: \"primary_line\",\n    onChange: handleChange,\n    value: primary_line\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: mergedStyles.lob_row\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: mergedStyles.lob_label,\n    htmlFor: \"secondary_line\"\n  }, \"Address Line 2\"), /*#__PURE__*/React.createElement(\"input\", {\n    style: mergedStyles.lob_input,\n    id: \"secondary_line\",\n    onChange: handleChange,\n    value: secondary_line\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: mergedStyles.lob_row\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: mergedStyles.lob_label,\n    htmlFor: \"city\"\n  }, \"City / Town\"), /*#__PURE__*/React.createElement(\"input\", {\n    style: mergedStyles.lob_input,\n    id: \"city\",\n    onChange: handleChange,\n    value: city\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: mergedStyles.lob_row\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: mergedStyles.lob_label,\n    htmlFor: \"state\"\n  }, \"State / Province / Region\"), /*#__PURE__*/React.createElement(\"input\", {\n    style: mergedStyles.lob_input,\n    id: \"state\",\n    onChange: handleChange,\n    value: state\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: mergedStyles.lob_row\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: mergedStyles.lob_label,\n    htmlFor: \"zip_code\"\n  }, \"Zip / Postal Code\"), /*#__PURE__*/React.createElement(\"input\", {\n    style: _extends({}, mergedStyles.lob_input),\n    id: \"zip_code\",\n    onChange: handleChange,\n    value: zip_code\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: mergedStyles.lob_row\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: mergedStyles.lob_label,\n    htmlFor: \"country\"\n  }, \"Country\"), /*#__PURE__*/React.createElement(CountrySelect, {\n    id: \"country\",\n    onChange: handleChange,\n    style: _extends({}, mergedStyles.lob_input, {\n      marginBottom: 'auto'\n    }),\n    value: country\n  })));\n};\n\nvar processApiResponse = function processApiResponse(apiResponse) {\n  return apiResponse.json().then(function (data) {\n    return 'error' in data ? Promise.reject(new Error(data.error.message)) : data;\n  });\n};\n\nvar verify = function verify(apiKey, address) {\n  if (!Object.keys(address || {}).length) {\n    return Promise.reject(new Error('Empty address was passed to verify function'));\n  }\n\n  if (!apiKey.length) {\n    return Promise.reject(new Error('Missing API key'));\n  }\n\n  return postVerifyAddress(apiKey, address).then(processApiResponse);\n};\n\nvar verifyInternational = function verifyInternational(apiKey, address, countryCode) {\n  if (!Object.keys(address || {}).length) {\n    return Promise.reject(new Error('Empty address was passed to verify function'));\n  }\n\n  if (!apiKey.length) {\n    return Promise.reject(new Error('Missing API key'));\n  }\n\n  if (typeof countryCode !== 'string') {\n    return Promise.reject(new Error('Expected countryCode to be of type string'));\n  }\n\n  if (/[A-Z]{2}/.test(countryCode) === false) {\n    return Promise.reject(new Error('countryCode must be a 2 letter country short-name code (ISO 3166)'));\n  }\n\n  return postVerifyInternationalAddress(apiKey, address, countryCode).then(processApiResponse);\n};\n\nexport { AddressForm, AddressFormInternational, Autocomplete, CountrySelect, verify, verifyInternational };","map":{"version":3,"sources":["D:\\React apps\\firstapp\\node_modules\\@lob\\react-address-autocomplete\\src\\api.js","D:\\React apps\\firstapp\\node_modules\\@lob\\react-address-autocomplete\\src\\Autocomplete.js","D:\\React apps\\firstapp\\node_modules\\@lob\\react-address-autocomplete\\src\\AddressForm\\useMergedStyles.js","D:\\React apps\\firstapp\\node_modules\\@lob\\react-address-autocomplete\\src\\AddressForm\\AddressForm.js","D:\\React apps\\firstapp\\node_modules\\@lob\\react-address-autocomplete\\src\\CountrySelect.js","D:\\React apps\\firstapp\\node_modules\\@lob\\react-address-autocomplete\\src\\AddressForm\\AddressFormInternational.js","D:\\React apps\\firstapp\\node_modules\\@lob\\react-address-autocomplete\\src\\verify.js"],"names":["postAutocompleteAddress","url","init","method","headers","Authorization","base64","apiKey","body","address_prefix","addressPrefix","fetch","postVerifyAddress","payload","address","JSON","postVerifyInternationalAddress","country","countryCode","capitalizeFirstLetter","s","getLobLabel","height","verticalAlign","Input","Autocomplete","addressComponentValues","delaySearch","delayValue","onSelection","onError","onInputChange","inputValue","defaultInputValue","primaryLineOnly","reactSelectProps","setInputValue","useState","selectValue","setSelectValue","autocompleteResults","setAutocompleteResults","fetchData","result","suggestions","error","newSuggestions","value","label","x","state","console","err","throttledFetchData","useRef","throttle","useEffect","handleInputChange","action","handleChange","option","baseStyles","lob_container","display","flexDirection","lob_input","backgroundColor","border","borderRadius","boxSizing","minHeight","outline","padding","width","lob_label","alignSelf","minWidth","marginRight","textAlign","lob_row","marginBottom","mergedStyles","Object","key","userStyles","defaultForm","primary_line","secondary_line","city","zip_code","customStyles","container","AddressForm","onFieldChange","styles","additionalProps","form","setForm","e","handleSelect","useMergedStyles","validLobCountryCodes","CountrySelect","props","code","AddressFormInternational","processApiResponse","Promise","data","verify","verifyInternational"],"mappings":"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","sourcesContent":["// External Dependencies\nimport base64 from 'base-64'\n\nexport const postAutocompleteAddress = (\n  apiKey,\n  addressPrefix,\n  additionalAddressData\n) => {\n  const url = 'https://api.lob.com/v1/us_autocompletions'\n  const init = {\n    method: 'POST',\n    headers: {\n      Authorization: `Basic ${base64.encode(apiKey + ':')}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      address_prefix: addressPrefix,\n      ...additionalAddressData\n    })\n  }\n\n  return fetch(url, init)\n}\n\nexport const postVerifyAddress = (apiKey, address) => {\n  const payload = typeof address === 'string' ? { address } : address\n  const url = 'https://api.lob.com/v1/us_verifications'\n  const init = {\n    method: 'POST',\n    headers: {\n      Authorization: `Basic ${base64.encode(apiKey + ':')}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(payload)\n  }\n\n  return fetch(url, init)\n}\n\nexport const postVerifyInternationalAddress = (\n  apiKey,\n  address,\n  countryCode\n) => {\n  const url = 'https://api.lob.com/v1/intl_verifications'\n  const init = {\n    method: 'POST',\n    headers: {\n      Authorization: `Basic ${base64.encode(apiKey + ':')}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ address, country: countryCode })\n  }\n\n  return fetch(url, init)\n}\n","// External Dependencies\nimport React, { useEffect, useState, useRef } from 'react'\nimport Select, { components } from 'react-select'\nimport throttle from 'lodash.throttle'\n\n// Internal Dependencies\nimport { postAutocompleteAddress } from './api'\n\n// Utility functions\nconst capitalizeFirstLetter = (txt) =>\n  txt\n    .toLowerCase()\n    .split(' ')\n    .map((s) => s.charAt(0).toUpperCase() + s.substring(1))\n    .join(' ')\n\nconst getLobLabel = () => (\n  <div>\n    <p>\n      Powered by{' '}\n      <img\n        style={{ height: '1.1em', verticalAlign: 'bottom' }}\n        // eslint-disable-next-line max-len\n        src='https://admin.google.com/u/0/ac/images/logo.gif?uid=115468147059962245207&service=google_gsuite'\n        alt='Lob'\n      />\n    </p>\n  </div>\n)\n\n/**\n * Part of Lob's response body schema for US autocompletions\n * https://docs.lob.com/#section/Autocompletion-Test-Env\n * @typedef AddressObject\n * @param {string} primary_line\n * @param {string?} secondary_line\n * @param {string} city\n * @param {string} state\n * @param {string} zip_code\n */\n\n/**\n * @typedef SelectionObject\n * @param {string} label - The address formatted as a single line.\n * @param {AddressObject} value - The address in its individual components.\n */\n\n/**\n * The equivalent to react-select's onChange\n * @callback onSelection\n * @param {SelectionObject} option - The selected value from Lob's autocomplete\n */\n\n/**\n * @callback onInputChange\n * @param {string} newValue - The value of the input component\n * @param {Object} actionMeta - Describes the event that occured to the input. See\n *  https://react-select.com/props for more details\n */\n\n// /**\n//  * @callback onSuggestion\n//  * @param {Array.<SelectionObject>} suggestions - Address that start the same as the user's input.\n//  */\n\n/**\n * @callback onError\n * @param {string} errorMessage\n */\n\n// We override react-select's default input component in order to let users edit their input value\n// and any selected values\nconst Input = (props) => <components.Input {...props} isHidden={false} />\n\n/**\n * @param {Object?} addressComponentValues - Specifies the search for autocomplete suggestions by\n *  including a city, state, and/or zip_code.\n * @param {string} apiKey - Public API key to your Lob account.\n * @param {boolean?} delaySearch -\n *  Delay calls to the API instead of calling on every keystroke.\n *  Default: true\n * @param {number?} delayValue - The time in milliseconds to wait between each API call.\n *  Default: 800\n * @param {string?} inputValue - Allows you to control the value of the input element\n * @param {onSelection?} onSelection -\n *  Callback function when the select component changes.\n * @param {onInputChange?} onInputChange -\n *  Callback function when the input value changes.\n * @param {onError?} onError - Callback function when we receive an API error.\n * @param {boolean} primaryLineOnly - When true, applying a suggestion updates the value of our\n *  select component with only the primary line of the address instead of the complete address.\n */\nconst Autocomplete = ({\n  addressComponentValues = {},\n  apiKey,\n  delaySearch = true,\n  delayValue = 800,\n  onSelection = () => {},\n  onError = () => {},\n  onInputChange = () => {},\n  inputValue: defaultInputValue = '',\n  primaryLineOnly = false,\n  ...reactSelectProps\n}) => {\n  const [inputValue, setInputValue] = useState(defaultInputValue)\n  const [selectValue, setSelectValue] = useState('AD')\n  const [autocompleteResults, setAutocompleteResults] = useState([])\n\n  const fetchData = (inputValue, addressComponentValues) =>\n    postAutocompleteAddress(apiKey, inputValue, addressComponentValues)\n      .then((result) => result.json())\n      .then(({ suggestions, error }) => {\n        if (error) {\n          onError(error.message)\n          return\n        }\n\n        const newSuggestions = suggestions.map((x) => ({\n          value: x,\n          label: `${capitalizeFirstLetter(\n            x.primary_line\n          )} ${capitalizeFirstLetter(x.city)} ${x.state}`\n        }))\n\n        setAutocompleteResults(newSuggestions)\n      })\n      .catch((err) => {\n        console.error(err.message)\n        onError(err.message)\n      })\n\n  const throttledFetchData = useRef(throttle(fetchData, delayValue)).current\n\n  useEffect(() => {\n    if (inputValue) {\n      if (delaySearch) {\n        // We pass inputValue manually because otherwise throttle would create a snapshot of\n        // fetchData with the previous state of inputValue instead of the new updated one.\n        throttledFetchData(inputValue, addressComponentValues)\n      } else {\n        fetchData(inputValue, addressComponentValues)\n      }\n    }\n  }, [inputValue])\n\n  /** Event handlers */\n\n  // Fire when the user types into the input\n  const handleInputChange = (newInputValue, { action }) => {\n    // `onBlur => setInputValue to last selected value\n    if (action === 'input-blur') {\n      // First check is user is controlling input value. If so we use it like for AddressForm\n      setInputValue(inputValue || (selectValue ? selectValue.label : ''))\n    }\n    // onInputChange => update inputValue\n    else if (action === 'input-change') {\n      setInputValue(newInputValue)\n      onInputChange(newInputValue, { action })\n    }\n  }\n\n  // Fires when the select component has changed (as opposed to the input inside the select)\n  const handleChange = (option) => {\n    // User has pasted an address directly into input, let's call the API\n    if (typeof option === 'string') {\n      setInputValue(option)\n      setSelectValue(option)\n      onSelection(option)\n      return\n    }\n\n    if (primaryLineOnly) {\n      setInputValue(option ? option.value.primary_line : '')\n    } else {\n      setInputValue(option ? option.label : '')\n    }\n\n    setSelectValue(option)\n    onSelection(option)\n  }\n\n  return (\n    <Select\n      components={{ Input }}\n      inputValue={inputValue}\n      options={autocompleteResults}\n      controlShouldRenderValue={false}\n      noOptionsMessage={getLobLabel}\n      placeholder='Start typing an address...'\n      value={selectValue}\n      {...reactSelectProps}\n      // We don't let user completely override onChange and onInputChange and risk them breaking\n      // the behavior of our input component.\n      onChange={handleChange}\n      onInputChange={handleInputChange}\n    />\n  )\n}\nexport default Autocomplete\n","// External Dependencies\nimport { useEffect, useState } from 'react'\n\nlet baseStyles = {\n  lob_container: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  /* Mimics UI of react-select for consistency */\n  lob_input: {\n    backgroundColor: 'hsl(0, 0%, 100%)',\n    border: 'solid 1px hsl(0, 0%, 80%)',\n    borderRadius: '4px',\n    boxSizing: 'border-box',\n    minHeight: '38px',\n    outline: 0,\n    padding: '0px 8px',\n    width: '100%'\n  },\n  lob_label: {\n    alignSelf: 'center',\n    minWidth: '5em',\n    marginRight: '1em',\n    textAlign: 'end'\n  },\n  lob_row: {\n    display: 'flex',\n    flexDirection: 'row',\n    marginBottom: '1em'\n  }\n}\n\nexport default (userStyles, isInternational) => {\n  const mergedStyles = {}\n\n  if (isInternational) {\n    baseStyles = {\n      ...baseStyles,\n      lob_label: {\n        ...baseStyles.lob_label,\n        minWidth: '8em'\n      }\n    }\n  }\n\n  Object.keys(baseStyles).forEach((key) => {\n    mergedStyles[key] =\n      key in userStyles ? userStyles[key](baseStyles[key]) : baseStyles[key]\n  })\n\n  return mergedStyles\n}\n","/* eslint-disable camelcase */\n\n// External Dependencies\nimport React, { useState } from 'react'\n\n// Internal Dependencies\nimport Autocomplete from '../Autocomplete'\nimport useMergedStyles from './useMergedStyles'\n\nconst defaultForm = {\n  primary_line: '',\n  secondary_line: '',\n  city: '',\n  state: '',\n  zip_code: ''\n}\n\nconst customStyles = {\n  container: (provided) => ({ ...provided, width: '100%' })\n}\n\n/**\n * Similar to Autocomplete except each address component is given its own input. Autocomplete\n * occurs on the primary line but the results are inserted into each component.\n * @param {string} apiKey - Public API key to your Lob account.\n * @param {onSelection?} onSelection -\n *  Callback function when the select component changes.\n * @param {onInputChange?} onInputChange -\n *  Callback function when any input value changes. Use e.target.id to determine which component\n *  is being updated.\n * @param {Object} styles - Override the default styles by providing an object similar to the\n *  styling framework used by react-select. Each key corresponds to a component and maps to a\n *  function that returns the new styles.lob_ Here is an example:\n *    const customStyles = {\n *      container: (baseStyles) => ({\n *        ...baseStyles,\n *        // custom styles go here\n *      })\n *    }\n *  Here are the following style keys used. Note that they are all prefixed with 'lob' to avoid\n *  colliding with the keys used by react-select.\n *  - lob_container\n *  - lob_input\n *  - lob_label\n *  - lob_row\n *\n *  For more details visit https://react-select.com/styles\n */\nconst AddressForm = ({\n  apiKey,\n  onFieldChange = () => {},\n  onSelection = () => {},\n  styles = {},\n  ...additionalProps\n}) => {\n  const [form, setForm] = useState(defaultForm)\n  const { primary_line, secondary_line, city, state, zip_code } = form\n\n  const handleChange = (e) => {\n    setForm({ ...form, [e.target.id]: e.target.value })\n    onFieldChange(e)\n  }\n\n  const handleSelect = (option) => {\n    // Overwrite the contents of our form based on the user's selection. If the selection does not\n    // have a secondary_line we clear it in the form.\n    setForm({\n      ...option.value,\n      secondary_line: option.value.secondary_line || ''\n    })\n\n    onSelection(option)\n  }\n\n  const mergedStyles = useMergedStyles(styles, false /* isInternational */)\n  console.log('mergedStyles', mergedStyles)\n\n  return (\n    <div style={mergedStyles.lob_container}>\n      <div style={mergedStyles.lob_row}>\n        <label style={mergedStyles.lob_label} htmlFor='primary_line'>\n          Address\n        </label>\n        <Autocomplete\n          apiKey={apiKey}\n          inputId='primary_line'\n          inputValue={primary_line}\n          {...additionalProps}\n          // Below are properties that we don't let the user overwrite\n          _addressComponentValues={{ city, state, zip_code }}\n          onSelection={handleSelect}\n          primaryLineOnly\n          styles={customStyles}\n        />\n      </div>\n      <div style={mergedStyles.lob_row}>\n        <label style={mergedStyles.lob_label} htmlFor='secondary_line'>\n          Apt, Suite\n        </label>\n        <input\n          style={mergedStyles.lob_input}\n          id='secondary_line'\n          onChange={handleChange}\n          value={secondary_line}\n        />\n      </div>\n      <div style={mergedStyles.lob_row}>\n        <label style={mergedStyles.lob_label} htmlFor='city'>\n          City\n        </label>\n        <input\n          style={mergedStyles.lob_input}\n          id='city'\n          onChange={handleChange}\n          value={city}\n        />\n      </div>\n      <div style={mergedStyles.lob_row}>\n        <label style={mergedStyles.lob_label} htmlFor='state'>\n          State\n        </label>\n        <input\n          style={mergedStyles.lob_input}\n          id='state'\n          onChange={handleChange}\n          value={state}\n        />\n      </div>\n      <div style={mergedStyles.lob_row}>\n        <label style={mergedStyles.lob_label} htmlFor='zip_code'>\n          Zip\n        </label>\n        <input\n          style={{ ...mergedStyles.lob_input, marginBottom: 'auto' }}\n          id='zip_code'\n          onChange={handleChange}\n          value={zip_code}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default AddressForm\n","// External Dependencies\nimport React from 'react'\n\n/**\n * ISO 3166 Country Codes. Lob international verification does not accept US or US territories\n * (US, AS, PR, FM, GU, MH, MP, PS, PW, or VI). For these addresses please use US verification.\n */\nexport const validLobCountryCodes = [\n  'AD',\n  'AE',\n  'AF',\n  'AG',\n  'AI',\n  'AL',\n  'AN',\n  'AO',\n  'AQ',\n  'AR',\n  'AT',\n  'AU',\n  'AW',\n  'AZ',\n  'BA',\n  'BB',\n  'BD',\n  'BE',\n  'BF',\n  'BG',\n  'BH',\n  'BI',\n  'BJ',\n  'BM',\n  'BN',\n  'BO',\n  'BQ',\n  'BR',\n  'BS',\n  'BT',\n  'BW',\n  'BY',\n  'BZ',\n  'CA',\n  'CD',\n  'CG',\n  'CH',\n  'CI',\n  'CK',\n  'CL',\n  'CM',\n  'CN',\n  'CO',\n  'CR',\n  'CS',\n  'CU',\n  'CV',\n  'CW',\n  'CY',\n  'CZ',\n  'DE',\n  'DJ',\n  'DK',\n  'DM',\n  'DO',\n  'DZ',\n  'EC',\n  'EE',\n  'EG',\n  'EH',\n  'ER',\n  'ES',\n  'ET',\n  'FI',\n  'FJ',\n  'FK',\n  'FO',\n  'FR',\n  'GA',\n  'GB',\n  'GD',\n  'GE',\n  'GH',\n  'GI',\n  'GL',\n  'GM',\n  'GN',\n  'GQ',\n  'GR',\n  'GS',\n  'GT',\n  'GW',\n  'GY',\n  'HK',\n  'HN',\n  'HR',\n  'HT',\n  'HU',\n  'ID',\n  'IE',\n  'IL',\n  'IN',\n  'IO',\n  'IQ',\n  'IR',\n  'IS',\n  'IT',\n  'JM',\n  'JO',\n  'JP',\n  'KE',\n  'KG',\n  'KH',\n  'KI',\n  'KM',\n  'KN',\n  'KP',\n  'KR',\n  'KW',\n  'KY',\n  'KZ',\n  'LA',\n  'LB',\n  'LC',\n  'LI',\n  'LK',\n  'LR',\n  'LS',\n  'LT',\n  'LU',\n  'LV',\n  'LY',\n  'MA',\n  'MC',\n  'MD',\n  'ME',\n  'MG',\n  'MK',\n  'ML',\n  'MM',\n  'MN',\n  'MO',\n  'MR',\n  'MS',\n  'MT',\n  'MU',\n  'MV',\n  'MW',\n  'MX',\n  'MY',\n  'MZ',\n  'NA',\n  'NE',\n  'NF',\n  'NG',\n  'NI',\n  'NL',\n  'NO',\n  'NP',\n  'NR',\n  'NU',\n  'NZ',\n  'OM',\n  'PA',\n  'PE',\n  'PG',\n  'PH',\n  'PK',\n  'PL',\n  'PN',\n  'PT',\n  'PY',\n  'QA',\n  'RO',\n  'RS',\n  'RU',\n  'RW',\n  'SA',\n  'SB',\n  'SC',\n  'SD',\n  'SE',\n  'SG',\n  'SH',\n  'SI',\n  'SK',\n  'SL',\n  'SM',\n  'SN',\n  'SO',\n  'SR',\n  'SS',\n  'ST',\n  'SV',\n  'SX',\n  'SY',\n  'SZ',\n  'TC',\n  'TD',\n  'TG',\n  'TH',\n  'TJ',\n  'TK',\n  'TL',\n  'TM',\n  'TN',\n  'TO',\n  'TR',\n  'TT',\n  'TV',\n  'TW',\n  'TZ',\n  'UA',\n  'UG',\n  'UY',\n  'UZ',\n  'VA',\n  'VC',\n  'VE',\n  'VG',\n  'VN',\n  'VU',\n  'WS',\n  'YE',\n  'ZA',\n  'ZM',\n  'ZW'\n]\n\n/**\n * Select component that hosts all of Lob's valid country codes for international verification.\n * This component does have any unique props.\n */\nconst CountrySelect = ({ ...props }) => (\n  <select {...props}>\n    {validLobCountryCodes.map((code) => (\n      <option key={code} value={code}>\n        {code}\n      </option>\n    ))}\n  </select>\n)\n\nexport default CountrySelect\n","/* eslint-disable camelcase */\n\n// External Dependencies\nimport React, { useState } from 'react'\n\n// Internal Dependencies\nimport CountrySelect from '../CountrySelect'\nimport useMergedStyles from './useMergedStyles'\n\nconst defaultForm = {\n  primary_line: '',\n  secondary_line: '',\n  city: '',\n  state: '',\n  zip_code: ''\n}\n\n/**\n * Renders a group of inputs for each address component including a select input for country code.\n * Does not perform any address autocompletion.\n * @param {onInputChange?} onInputChange -\n *  Callback function when any input value changes. Use e.target.id to determine which component\n *  is being updated.\n * @param {Object} styles - Override the default styles by providing an object similar to the\n *  styling framework used by react-select. Each key corresponds to a component and maps to a\n *  function that returns the new styles.lob_ Here is an example:\n *    const customStyles = {\n *      container: (baseStyles) => ({\n *        ...baseStyles,\n *        // custom styles go here\n *      })\n *    }\n *  Here are the following style keys used. Note that they are all prefixed with 'lob' to avoid\n *  colliding with the keys used by react-select.\n *  - lob_container\n *  - lob_input\n *  - lob_label\n *  - lob_row\n *\n *  For more details visit https://react-select.com/styles\n */\nconst AddressFormInternational = ({\n  onFieldChange = () => {},\n  styles = {}\n}) => {\n  const [form, setForm] = useState(defaultForm)\n  const { primary_line, secondary_line, city, state, zip_code, country } = form\n\n  const handleChange = (e) => {\n    setForm({ ...form, [e.target.id]: e.target.value })\n    onFieldChange(e)\n  }\n\n  const mergedStyles = useMergedStyles(styles, true /* isInternational */)\n\n  return (\n    <div data-testid='intl_container' style={mergedStyles.lob_container}>\n      <div style={mergedStyles.lob_row}>\n        <label style={mergedStyles.lob_label} htmlFor='primary_line'>\n          Address Line 1\n        </label>\n        <input\n          style={mergedStyles.lob_input}\n          id='primary_line'\n          onChange={handleChange}\n          value={primary_line}\n        />\n      </div>\n      <div style={mergedStyles.lob_row}>\n        <label style={mergedStyles.lob_label} htmlFor='secondary_line'>\n          Address Line 2\n        </label>\n        <input\n          style={mergedStyles.lob_input}\n          id='secondary_line'\n          onChange={handleChange}\n          value={secondary_line}\n        />\n      </div>\n      <div style={mergedStyles.lob_row}>\n        <label style={mergedStyles.lob_label} htmlFor='city'>\n          City / Town\n        </label>\n        <input\n          style={mergedStyles.lob_input}\n          id='city'\n          onChange={handleChange}\n          value={city}\n        />\n      </div>\n      <div style={mergedStyles.lob_row}>\n        <label style={mergedStyles.lob_label} htmlFor='state'>\n          State / Province / Region\n        </label>\n        <input\n          style={mergedStyles.lob_input}\n          id='state'\n          onChange={handleChange}\n          value={state}\n        />\n      </div>\n      <div style={mergedStyles.lob_row}>\n        <label style={mergedStyles.lob_label} htmlFor='zip_code'>\n          Zip / Postal Code\n        </label>\n        <input\n          style={{ ...mergedStyles.lob_input }}\n          id='zip_code'\n          onChange={handleChange}\n          value={zip_code}\n        />\n      </div>\n      <div style={mergedStyles.lob_row}>\n        <label style={mergedStyles.lob_label} htmlFor='country'>\n          Country\n        </label>\n        <CountrySelect\n          id='country'\n          onChange={handleChange}\n          style={{ ...mergedStyles.lob_input, marginBottom: 'auto' }}\n          value={country}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default AddressFormInternational\n","// Internal Dependencies\nimport { postVerifyAddress, postVerifyInternationalAddress } from './api'\n\n// Helper function to convert any API error into a JS Error object. This is needed when\n// communication to the API was successful but the payload was bad.\nconst processApiResponse = (apiResponse) =>\n  apiResponse\n    .json()\n    .then((data) =>\n      'error' in data ? Promise.reject(new Error(data.error.message)) : data\n    )\n\n/**\n * A subset of the request object required by Lob. Note: Either zip_code is required or both city\n * and state are required. Learn more about Lob's verification endpoint here:\n * https://docs.lob.com/#operation/us_verification\n * @typedef AddressObject\n * @param {string} primary_line\n * @param {string?} secondary_line\n * @param {string} city\n * @param {string} state\n * @param {string} zip_code\n */\n\n/**\n * Checks the deliverability of a given address and provides meta data such as geo coordinates,\n * county, building type, etc.\n * @param {string} apiKey - The API key associated with your Lob account\n * @param {string | AddressObject} address - The address to verify\n * @returns {Promise<Object>} - The API response from Lob. For more information visit:\n *  https://docs.lob.com/#operation/us_verification\n */\nexport const verify = (apiKey, address) => {\n  // Validate arguments\n  if (!Object.keys(address || {}).length) {\n    return Promise.reject(\n      new Error('Empty address was passed to verify function')\n    )\n  }\n\n  if (!apiKey.length) {\n    return Promise.reject(new Error('Missing API key'))\n  }\n\n  // Send request to Lob and let user decide how to handle the response\n  return postVerifyAddress(apiKey, address).then(processApiResponse)\n}\n\n/**\n * Checks the deliverability of a given address and provides meta data such as geo coordinates,\n * county, building type, etc.\n * @param {string} apiKey - The API key associated with your Lob account\n * @param {string | AddressObject} address - The address to verify\n * @returns {Promise<Object>} - The API response from Lob. For more information visit:\n *  https://docs.lob.com/#operation/us_verification\n */\nexport const verifyInternational = (apiKey, address, countryCode) => {\n  // Validate arguments\n  if (!Object.keys(address || {}).length) {\n    return Promise.reject(\n      new Error('Empty address was passed to verify function')\n    )\n  }\n\n  if (!apiKey.length) {\n    return Promise.reject(new Error('Missing API key'))\n  }\n\n  if (typeof countryCode !== 'string') {\n    return Promise.reject(\n      new Error('Expected countryCode to be of type string')\n    )\n  }\n\n  if (/[A-Z]{2}/.test(countryCode) === false) {\n    return Promise.reject(\n      new Error(\n        'countryCode must be a 2 letter country short-name code (ISO 3166)'\n      )\n    )\n  }\n\n  // Send request to Lob and let user decide how to handle the response\n  return postVerifyInternationalAddress(apiKey, address, countryCode).then(\n    processApiResponse\n  )\n}\n"]},"metadata":{},"sourceType":"module"}